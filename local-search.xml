<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>转发和重定向的区别</title>
    <link href="/2022/11/27/%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2022/11/27/%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="转发和重定向有什么区别？"><a href="#转发和重定向有什么区别？" class="headerlink" title="转发和重定向有什么区别？"></a>转发和重定向有什么区别？</h1><p><strong>1、从地址栏来说：</strong><br><strong>转发</strong>是浏览器发送请求给服务器，服务器中的一个资源接受请求，处理信息，然后跳转到另一个组件去处理信息，最后响应给浏览器。转发是在一个服务器内部处理的，所以url地址栏不会发生变化。<br><a href="https://imgse.com/i/zdsLuV"><img src="https://s1.ax1x.com/2022/11/29/zdsLuV.png" alt="zdsLuV.png"></a><br><strong>重定向</strong>是浏览器发送请求给服务器中的一个资源，然后该资源发送一个状态码给浏览器；然后该浏览器根据该状态码，重新发送一个请求给服务器中的另一个资源，然后将该资源响应信息给浏览器，重定向可以定位到不同的服务器，所以url地址栏会改变。<br><a href="https://imgse.com/i/zdsOBT"><img src="https://s1.ax1x.com/2022/11/29/zdsOBT.png" alt="zdsOBT.png"></a><br><strong>2、对数据来说：</strong> 转发可以共享数据，重定向不可以共享数据。<br><strong>3、从效率方面来说：</strong> 转发效率高，重定向效率低。<br><strong>4、应用场景：</strong> 从日常方面来说，转发主要用于项目中用户登录的时候，转发到对应的角色模块<br>重定向主要用户项目中用户注销，跳转到登录页面或者其他网站上。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cookie和session的区别</title>
    <link href="/2022/11/24/cookie%E5%92%8Csession/"/>
    <url>/2022/11/24/cookie%E5%92%8Csession/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是一个会话？"><a href="#一、什么是一个会话？" class="headerlink" title="一、什么是一个会话？"></a>一、什么是一个会话？</h1><p>要理解cookie和session首先要理解什么是会话。<br><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问了多个web资源，然后关闭浏览器，这个过程可以称之为会话。</p><h1 id="二、保持会话的技术有什么呢？"><a href="#二、保持会话的技术有什么呢？" class="headerlink" title="二、保持会话的技术有什么呢？"></a>二、保持会话的技术有什么呢？</h1><ul><li><strong>cookie：</strong>客户端技术（响应，请求）</li><li><strong>session：</strong>服务端技术，利用这个技术，我们可以保存用户的会话信息，我们可以把信息或者数据放在session中。</li><li><strong>生活中有哪个是保持会话呢？</strong><br>网站登录之后，你下次不用再登录了，第二次访问直接就上去了。</li></ul><h1 id="三、这两个技术有什么区别呢？"><a href="#三、这两个技术有什么区别呢？" class="headerlink" title="三、这两个技术有什么区别呢？"></a>三、这两个技术有什么区别呢？</h1><p><strong>1、数据存储位置</strong>：cookie数据存放在客户的<strong>浏览器</strong>上，session数据放在<strong>服务器</strong>上。<br><strong>2、安全性：</strong>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗  ，考虑到安全应当使用session。<br><strong>3、服务器性能：</strong>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。<br><strong>4、数据大小：</strong>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br><strong>5、信息重要程度：</strong>可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合框架</title>
    <link href="/2022/11/23/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/11/23/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、集合框架介绍"><a href="#一、集合框架介绍" class="headerlink" title="一、集合框架介绍"></a>一、集合框架介绍</h2><p><img src="https://img-blog.csdnimg.cn/a64f85edd6a84d47b24bb53bc7d4ac86.png" alt="在这里插入图片描述"></p><p><br />集合框架主要用于保存对象，主要分类有三种，分别是<strong>List，Set和Map</strong>。</p><ul><li>List为<strong>有序，重复</strong>的集合<ul><li>常见的List有ArrayList、LinkedList、Vector等</li></ul></li><li>Set为<strong>无序，不可重复</strong>的集合<ul><li>常见Set接口的实现类有HashSet，LinedHashSet和TreeSet等</li></ul></li><li>Map<strong>键值对</strong>存储<ul><li>常见的Map接口实现类有HashMap和TreeMap</li></ul></li></ul><blockquote><p>Collection接口有两个主要的子类为List和Set，但是Map不是Collection的子类，因为其本身就是一个顶层接口。</p></blockquote><p><a name="FpcZ3"></a></p><h2 id="二、List介绍"><a href="#二、List介绍" class="headerlink" title="二、List介绍"></a>二、List介绍</h2><p><a name="XZ3hN"></a></p><h3 id="1、ArrayList介绍"><a href="#1、ArrayList介绍" class="headerlink" title="1、ArrayList介绍"></a>1、ArrayList介绍</h3><ul><li>基于的数据结构是<strong>数组</strong>，是一个<strong>动态的数组</strong>队列（动态数组：容量可以自动增长）</li><li>可以存储任意多的对象，但是只能存储对象，不能存储原生数据类型，例如int</li><li>基于数组的特点，ArrayList<strong>查询的速度非常快</strong>，但是<strong>插入和删除元素的速度比较慢</strong><br><a name="R5M1Z"></a></li></ul><h3 id="2、LinkedList介绍"><a href="#2、LinkedList介绍" class="headerlink" title="2、LinkedList介绍"></a>2、LinkedList介绍</h3><ul><li>基于的数据结构是<strong>链表，</strong>是一个<strong>双向链表</strong>（链表特点：每个元素分配的空间不必连续）</li><li>基于链表的特点，LinkedList插入和删除元素时速度非常快，但访问元素的速度比较慢<br><a name="QO6wB"></a></li></ul><h3 id="3、常见List-API介绍"><a href="#3、常见List-API介绍" class="headerlink" title="3、常见List API介绍"></a>3、常见List API介绍</h3><p><img src="https://img-blog.csdnimg.cn/a3066f6680be4085bf9ec86fe87a3218.png" alt="在这里插入图片描述"></p><ul><li><strong>常见API介绍</strong></li></ul><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>int size()</td><td>返回大小</td></tr><tr><td>boolean isEmpty()</td><td>判断是否为空</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否包含指定的元素</td></tr><tr><td>boolean add(E e)</td><td>向容器添加对象</td></tr><tr><td>boolean remove(Object o)</td><td>根据对象删除一个元素</td></tr><tr><td>sort（）</td><td>对集合进行排序</td></tr><tr><td>void clear()</td><td>清除集合中的所有元素</td></tr><tr><td>get(int index)</td><td>根据索引获取元素</td></tr><tr><td>set(int index, E element)</td><td>更新一个元素</td></tr><tr><td>remove(int index)</td><td>根据索引删除一个元素</td></tr></tbody></table><ul><li><strong>LinkedList特有API</strong>：getFirst() 、getLast() <ul><li>getFirst() ：获取第⼀个元素 </li><li>getLast() ：获取最后⼀个元素<br><a name="QIA6y"></a></li></ul></li></ul><h3 id="4、ArrayList和LinkedList的区别"><a href="#4、ArrayList和LinkedList的区别" class="headerlink" title="4、ArrayList和LinkedList的区别"></a>4、ArrayList和LinkedList的区别</h3><p><strong>（1）ArrayList</strong>：底层数据结构是<strong>数组</strong>，查询快，增删慢，<strong>线程不安全</strong>，效率高，可以存储重复元素，适合存储<strong>查询多，增删少</strong>的数据。<br /><strong>（2）LinkedList</strong> 底层数据结构是<strong>链表</strong>，查询慢，增删快，<strong>线程不安全</strong>，效率高，可以存储重复元素，适合存储<strong>增删多，查询少</strong>的数据<br><a name="plPBo"></a></p><h2 id="三、Map介绍"><a href="#三、Map介绍" class="headerlink" title="三、Map介绍"></a>三、Map介绍</h2><p><a name="wwFyz"></a></p><h3 id="1、HashMap介绍"><a href="#1、HashMap介绍" class="headerlink" title="1、HashMap介绍"></a>1、HashMap介绍</h3><ul><li>基于的数据结构是<strong>数组和链</strong>（散列桶），它存储的内容是键值对(<strong>key-value</strong>)映射（jdk1.8后底层数据结构改为“数组+链表+红⿊树”）</li><li>是基于<strong>散列法</strong>的原理，使用put(key, value)存储对象到HashMap中，使用get(key)从HashMap中获取对象。当put()方法传递键和值时，会先对键调用hashCode()方法，计算并返回的hashCode是用于找到Map数组的桶位置来储存Entry对象的，是<strong>非线程安全</strong>的，所以HashMap<strong>操作速度很快</strong><br><img src="https://img-blog.csdnimg.cn/712ff7e8eef74b4fbb8c31eb5ac56603.png" alt="在这里插入图片描述"></li></ul><h3 id="2、TreeMap介绍"><a href="#2、TreeMap介绍" class="headerlink" title="2、TreeMap介绍"></a>2、TreeMap介绍</h3><ul><li>在数据的存储过程中，能够<strong>自动对数据进行排序</strong>，它是<strong>有序</strong>的集合</li><li>TreeMap使用的存储结构是<strong>平衡二叉树</strong>，也称为红黑树</li><li>默认排序规则：按照key的字典顺序来排序（升序），也可以自定义排序规则，要实现<br /><strong>Comparator</strong>接口<br><a name="mZuyb"></a></li></ul><h3 id="3、常见Map-API介绍"><a href="#3、常见Map-API介绍" class="headerlink" title="3、常见Map API介绍"></a>3、常见Map API介绍</h3><p><img src="https://img-blog.csdnimg.cn/047d46737e704f2b84ab531df63795e7.png" alt="在这里插入图片描述"></p><ul><li><strong>常见API介绍</strong></li></ul><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>int size()</td><td>返回map的元素数量</td></tr><tr><td>boolean isEmpty()</td><td>判断map是否为空</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断是否包含某个key</td></tr><tr><td>get(Object key)</td><td>根据key获取value</td></tr><tr><td>put(K key, V value)</td><td>往map⾥面放key - value</td></tr><tr><td>remove(Object key)</td><td>根据key删除对应的元素</td></tr><tr><td>void clear()</td><td>清空容器</td></tr><tr><td>Collection<V> values()</td><td>获取所有value集合</td></tr><tr><td>Set<K> keySet()</td><td>返回所有key的集合</td></tr></tbody></table><p><a name="gambz"></a></p><h3 id="4、HashMap和TreeMap的区别"><a href="#4、HashMap和TreeMap的区别" class="headerlink" title="4、HashMap和TreeMap的区别"></a>4、HashMap和TreeMap的区别</h3><ul><li>HashMap可实现<strong>快速存储和检索</strong>，但缺点是包含的元素是⽆无序的，适⽤用于在Map中<strong>插<br />入、删除和定位</strong>元素</li><li>TreeMap能便捷的实现对其<strong>内部元素的各种排序</strong>，但其⼀般<strong>性能比HashMap差</strong>,适⽤用于<br />按<strong>自然顺序或自定义顺序遍历键</strong>(key)<br><a name="fHXWC"></a></li></ul><h2 id="四、Set介绍"><a href="#四、Set介绍" class="headerlink" title="四、Set介绍"></a>四、Set介绍</h2><p><a name="t4ARr"></a></p><h3 id="1、HashSet介绍"><a href="#1、HashSet介绍" class="headerlink" title="1、HashSet介绍"></a>1、HashSet介绍</h3><ul><li>HashSet类按照<strong>哈希算法</strong>来存取集合中的对象，<strong>存取速度比较快</strong> </li><li>对应的Map是<strong>HashMap</strong>，是基于Hash的<strong>快速元素插入，元素无顺序</strong>。<br><a name="nGJbl"></a></li></ul><h3 id="2、TreeSet介绍"><a href="#2、TreeSet介绍" class="headerlink" title="2、TreeSet介绍"></a>2、TreeSet介绍</h3><ul><li>TreeSet类能够对集合中的对象<strong>进行排序</strong><br><a name="vW6gQ"></a></li></ul><h3 id="3、常见Set-API介绍"><a href="#3、常见Set-API介绍" class="headerlink" title="3、常见Set API介绍"></a>3、常见Set API介绍</h3><p><img src="https://img-blog.csdnimg.cn/4bb30aae233a462a82b2cbdf0025e616.png" alt="在这里插入图片描述"></p><ul><li><strong>常见API介绍</strong></li></ul><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>int size()</td><td>返回大小</td></tr><tr><td>boolean isEmpty()</td><td>判断是否为空</td></tr><tr><td>boolean contains(Object o)</td><td>判断是否存在该对象</td></tr><tr><td>boolean add(E e)</td><td>往容器里面添加对象</td></tr><tr><td>boolean remove(Object o)</td><td>根据对象删除元素</td></tr><tr><td>void clear()</td><td>清空元素</td></tr></tbody></table><p><a name="VtQjg"></a></p><h3 id="4、HashSet和TreeSet的区别"><a href="#4、HashSet和TreeSet的区别" class="headerlink" title="4、HashSet和TreeSet的区别"></a>4、HashSet和TreeSet的区别</h3><ul><li>HashSet不能保证元素的排列顺序， TreeSet可以确保集合元素处于排序状态</li><li>HashSet底层用的是<strong>哈希表</strong>， TreeSet采用的数据结构是<strong>红黑树</strong></li><li>HashSet中元素可以是null，但只能有⼀个， TreeSet不允许放入null</li><li>一般使用HashSet，如果需要排序的功能时，才使用TreeSet（性能原因） <br /><br><a name="fazmc"></a></li></ul><h2 id="五、迭代器（Iterator）介绍"><a href="#五、迭代器（Iterator）介绍" class="headerlink" title="五、迭代器（Iterator）介绍"></a>五、迭代器（Iterator）介绍</h2><p><a name="HfWp2"></a></p><h3 id="1、什么是迭代器"><a href="#1、什么是迭代器" class="headerlink" title="1、什么是迭代器"></a>1、什么是迭代器</h3><ul><li>Iterator是java中的一个接口，核心作用就是用来<strong>遍历容器的元素</strong>，当容器实现了Iterator接<br />口后，可以通过调用Iterator()方法获取一个 Iterator对象 。<br><a name="KgFIy"></a></li></ul><h3 id="2、迭代器的作用"><a href="#2、迭代器的作用" class="headerlink" title="2、迭代器的作用"></a>2、迭代器的作用</h3><ul><li>循环遍历集合 。</li></ul><blockquote><p>因为容器的实现有多种，不同的容器遍历规则不一样，所以设计了Iterator接口，让容器本身去实现这个接口，实现里面的方法，从而让开发人员不用关系容器的遍历机制，直接使用对应的方法即可。</p></blockquote><p><a name="PuicK"></a></p><h3 id="3、迭代器如何使用"><a href="#3、迭代器如何使用" class="headerlink" title="3、迭代器如何使用"></a>3、迭代器如何使用</h3><ul><li><strong>核心方法</strong></li></ul><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>boolean hashNext()</td><td>用于判断iterator内是否有下个元素，如果有则返回true，没有则false</td></tr><tr><td>Obejct next()</td><td>返回iterator的下⼀个元素，同时指针也会向后移动1位</td></tr><tr><td>void remove()</td><td>删除指针的上一个元素</td></tr></tbody></table><ul><li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建集合</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//添加元素</span><br>list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>list.add(<span class="hljs-string">&quot;mary&quot;</span>);<br>list.add(<span class="hljs-string">&quot;tim&quot;</span>);<br>list.add(<span class="hljs-string">&quot;tony&quot;</span>);<br>list.add(<span class="hljs-string">&quot;eric&quot;</span>);<br>list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br><span class="hljs-comment">//遍历集合</span><br>Iterator&lt;String&gt; iterator = list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>三层架构</title>
    <link href="/2022/11/21/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2022/11/21/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h1><p><a href="https://imgse.com/i/zdiZH1"><img src="https://s1.ax1x.com/2022/11/29/zdiZH1.jpg" alt="zdiZH1.jpg"></a></p><h2 id="一、什么是三层架构"><a href="#一、什么是三层架构" class="headerlink" title="一、什么是三层架构"></a>一、什么是三层架构</h2><p>三层架构就是为了符合“<strong>高内聚，低耦合</strong>”思想，把各个功能模块划分为<strong>表示层（UI）</strong>、<strong>业务逻辑层（BLL）</strong>和<strong>数据访问层（DAL）</strong>三层架构，各层之间采用接口相互访问，并通过对象模型的实体类（Model）作为数据传递的载体，不同的对象模型的实体类一般对应于数据库的不同表，实体类的属性与数据库表的字段名一致。（百度百科）</p><hr><h2 id="二、该架构的目的是什么？"><a href="#二、该架构的目的是什么？" class="headerlink" title="二、该架构的目的是什么？"></a>二、该架构的目的是什么？</h2><p>三层架构区分层次的目的是为了 “<strong>高内聚，低耦合</strong>”。开发人员<strong>分工更明确</strong>，将精力更专注于应用系统核心业务逻辑的分析、设计和开发，加快项目的进度，提高了开发效率，有利于项目的更新和维护工作。</p><hr><h2 id="三、怎么理解三层架构？"><a href="#三、怎么理解三层架构？" class="headerlink" title="三、怎么理解三层架构？"></a>三、怎么理解三层架构？</h2><h4 id="1-三层是哪三层，每一层的作用是什么？"><a href="#1-三层是哪三层，每一层的作用是什么？" class="headerlink" title="1.三层是哪三层，每一层的作用是什么？"></a>1.三层是哪三层，每一层的作用是什么？</h4><p><strong>表现层</strong>: 主要是指与用户交互的界面。用于接收用户输入的数据和显示处理后用户需要的数据。<br><strong>业务逻辑层</strong>: 表现层和数据访问层之间的桥梁。实现业务逻辑。业务逻辑具体包含：验证、计算、业务规则等等。<br><strong>数据访问层</strong>: 与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。   </p><h4 id="2-为什么要用三层？"><a href="#2-为什么要用三层？" class="headerlink" title="2.为什么要用三层？"></a>2.为什么要用三层？</h4><h5 id="①结合电商平台理解："><a href="#①结合电商平台理解：" class="headerlink" title="①结合电商平台理解："></a>①结合电商平台理解：</h5><p><a href="https://imgse.com/i/zdkhnJ"><img src="https://s1.ax1x.com/2022/11/29/zdkhnJ.png" alt="zdkhnJ.png"></a><br>一个店铺的大概组成:<strong>客服、仓库人员、生产人员</strong>，那他们分别负责什么呢？<br><strong>客服</strong>：负责与客户打交道，解答客户的问题。<br><strong>仓库人员</strong>：跟客服以及生产人员对接，跟客服对接有什么情况呢。例如需要换地址，退货，换货等等；跟生产线对接有什么情况呢，例如有时候一个商品需求大，这时候就需要生产线加大生产了。<br><strong>生产人员</strong>：负责跟仓库人员对接，以及跟外面的原材料厂商对接，用来生产仓库所需要的商品。<br>现在想想，电商的每个组成部分是不是各自独立的，只要对接好，完成自己的任务就好了，这也可以理解成一种<strong>解耦</strong>的思想。  </p><h5 id="②那我们为什么把他们这样分成几个部分呢？"><a href="#②那我们为什么把他们这样分成几个部分呢？" class="headerlink" title="②那我们为什么把他们这样分成几个部分呢？"></a>②那我们为什么把他们这样分成几个部分呢？</h5><p>结合现实想想，如果把全部任务集合在同一个人身上，那如果他辞职了，是不是这个店铺就运行不了了呢，程序也是和现实差不多。  </p><h5 id="③那这样分部分的好处有什么呢？"><a href="#③那这样分部分的好处有什么呢？" class="headerlink" title="③那这样分部分的好处有什么呢？"></a>③那这样分部分的好处有什么呢？</h5><p>经过这样的结构，各个部分各司其职。如果有哪个部分出了问题只要找相应的部分就可以了。程序也一样，这样解耦后，更有利于我们后期的维护。</p><hr><h1 id="四、三层架构的缺点"><a href="#四、三层架构的缺点" class="headerlink" title="四、三层架构的缺点"></a>四、三层架构的缺点</h1><p>1、降低了系统的性能。这是不言而喻的。如果不采用分层式结构，很多业务可以直接造访数据库，以此获取相应的数据，如今却必须通过中间层来完成。<br>2、有时会导致级联的修改。这种修改尤其体现在自上而下的方向。如果在表示层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层和数据访问层中都增加相应的代码。<br>3、增加了代码量，增加了工作量。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向接口编程</title>
    <link href="/2022/11/20/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/11/20/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要面向接口编程？"><a href="#为什么要面向接口编程？" class="headerlink" title="为什么要面向接口编程？"></a>为什么要面向接口编程？</h3><p>接口这个概念，在我们实际生活中<strong>最常见的例子</strong>就是：插座。<br>我们需要<strong>事先定义</strong>好接口的<strong>标准</strong>，厂家都按照这个接口标准生产，不管什么牌子，内部什么电路，用户都可以拿来用。<br>同理，实际代码设计也是这样！我们在设计一个软件的代码架构时，我们都希望<strong>事先约定好各</strong>个功能的<strong>接口</strong>，后续即使项目变化、功能升级，程序员只需要按照接口约定重新实现一下，就可以达到系统升级和扩展的目的！   </p><hr><h3 id="面向接口编程的好处"><a href="#面向接口编程的好处" class="headerlink" title="面向接口编程的好处"></a>面向接口编程的好处</h3><p>面向接口编程开发，对代码架构的解耦和扩展确实很有好处，这种接口定义和具体实现逻辑的分开，非常有利于后续扩展和维护！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建个人博客</title>
    <link href="/2022/11/13/%E5%A6%82%E4%BD%95%E7%94%A8hexo-githut%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/13/%E5%A6%82%E4%BD%95%E7%94%A8hexo-githut%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、搭建前的软件准备（git，node）"><a href="#一、搭建前的软件准备（git，node）" class="headerlink" title="一、搭建前的软件准备（git，node）"></a>一、搭建前的软件准备（git，node）</h1><h3 id="Git：官网下载"><a href="#Git：官网下载" class="headerlink" title="Git：官网下载"></a>Git：<a href="https://git-scm.com/">官网下载</a></h3><ol><li>根据自己的操作系统安装对应的版本，安装的时候一直按next即可</li><li>配置对应的环境变量</li><li>win+r进入cmd窗口，输入指令<code>git -v</code>，查看是否安装完成</li></ol><hr><h3 id="Node-js-官网下载"><a href="#Node-js-官网下载" class="headerlink" title="Node.js:官网下载"></a>Node.js:<a href="https://nodejs.org/en/">官网下载</a></h3><ol><li>根据自己的操作系统安装对应的版本</li><li>安装完成后，win+r进入cmd窗口，<br> -   输入指令:<code>node -v</code>查看node版本<br> -   输入指令:<code>npm -v</code>查看npm版本<br> -   输入指令:<code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code>安装淘宝的cnpm管理器<br> -   输入指令:<code>cnpm -v</code>查看cnpm版本</li></ol><hr><h1 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h1><p>1.win+r进入cmd窗口</p><ul><li>输入指令：<code>cnpm install -g hexo-cli</code>安装hexo框架</li><li>输入指令:<code>hexo -v</code>查看hexo版本</li></ul><hr><h1 id="三、创建博客目录"><a href="#三、创建博客目录" class="headerlink" title="三、创建博客目录"></a>三、创建博客目录</h1><p>1.找个自己觉得合适的地方，cd该地方后输入指令:<code>mkdir blog</code>,创建博客目录<br>2.输入指令：<code>cd blog</code>,进入博客目录</p><hr><h1 id="四、生成博客"><a href="#四、生成博客" class="headerlink" title="四、生成博客"></a>四、生成博客</h1><p>1.在该博客目录下，输入<code>sudo hexo init</code>初始化博客<br>2.在该博客目录下，输入<code>hexo s</code>启动本地博客服务<br>3.在游览器地址栏输入<code>http://localhost:4000/</code>,进行本地访问<br><img src="/img/pages/001.png" alt="示例"></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
